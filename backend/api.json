{
  "backend_apis": [
    {
      "path": "/",
      "method": "GET",
      "description": "Simple test route to check if the API is running.",
      "controller": "N/A"
    },
    {
      "path": "/posts",
      "method": "GET",
      "description": "Fetches Instagram posts for the authenticated user.",
      "controller": "server.js (inline)",
      "authentication_required": true
    },
    {
      "path": "/users/register",
      "method": "POST",
      "description": "Registers a new user with username, email, and password. Optionally accepts Instagram connection details.",
      "controller": "usercontrollers.registerUser",
      "authentication_required": false,
      "request_body": {
        "username": "string",
        "email": "string",
        "password": "string",
        "ACCESS_TOKEN": "string (optional)",
        "IG_USER_ID": "string (optional)",
        "IG_USERNAME": "string (optional)",
        "IG_VERIFY_TOKEN": "string (optional)",
        "APP_SECRET": "string (optional)"
      }
    },
    {
      "path": "/users/login",
      "method": "POST",
      "description": "Logs in a user with username and password, returning a JWT token and user details.",
      "controller": "usercontrollers.loginUser",
      "authentication_required": false,
      "request_body": {
        "username": "string",
        "password": "string"
      }
    },
    {
      "path": "/users/username",
      "method": "POST",
      "description": "Stores the Instagram username for the authenticated user.",
      "controller": "usercontrollers.storeInstaUsername",
      "authentication_required": true,
      "request_body": {
        "insta_username": "string"
      }
    },
    {
      "path": "/users/connectiondetails",
      "method": "POST",
      "description": "Updates Instagram connection details (ACCESS_TOKEN, IG_USER_ID, IG_USERNAME, IG_VERIFY_TOKEN, APP_SECRET) for the authenticated user.",
      "controller": "usercontrollers.updateConnectionDetails",
      "authentication_required": true,
      "request_body": {
        "ACCESS_TOKEN": "string",
        "IG_USER_ID": "string",
        "IG_USERNAME": "string",
        "IG_VERIFY_TOKEN": "string (optional)",
        "APP_SECRET": "string (optional)"
      }
    },
    {
      "path": "/context/:postId",
      "method": "GET",
      "description": "Retrieves the context for a specific post for the authenticated user.",
      "controller": "contextcontroller.getContext",
      "authentication_required": true,
      "path_parameters": {
        "postId": "string (ID of the post)"
      }
    },
    {
      "path": "/context",
      "method": "POST",
      "description": "Adds new context to a post for the authenticated user.",
      "controller": "contextcontroller.addContext",
      "authentication_required": true,
      "request_body": {
        "postId": "string",
        "context": "object"
      }
    },
    {
      "path": "/context/:postId",
      "method": "PUT",
      "description": "Updates the context for a specific post for the authenticated user.",
      "controller": "contextcontroller.updateContext",
      "authentication_required": true,
      "path_parameters": {
        "postId": "string (ID of the post)"
      },
      "request_body": {
        "context": "object"
      }
    },
    {
      "path": "/context/:postId",
      "method": "DELETE",
      "description": "Deletes the context for a specific post for the authenticated user.",
      "controller": "contextcontroller.deleteContext",
      "authentication_required": true,
      "path_parameters": {
        "postId": "string (ID of the post)"
      }
    },
    {
      "path": "/context/:postId/toggle-automation",
      "method": "PUT",
      "description": "Toggles the automation status for a specific post's context for the authenticated user.",
      "controller": "contextcontroller.toggleAutomation",
      "authentication_required": true,
      "path_parameters": {
        "postId": "string (ID of the post)"
      }
    },
    {
      "path": "/webhook/get",
      "method": "GET",
      "description": "Verifies the webhook endpoint.",
      "controller": "webhookController.verifyWebhook",
      "authentication_required": false
    },
    {
      "path": "/webhook/webhook",
      "method": "POST",
      "description": "Handles incoming webhook messages.",
      "controller": "webhookController.handleWebhook",
      "authentication_required": false
    }
  ]
}